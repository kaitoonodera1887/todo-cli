{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0885d096-592a-42a0-9834-5343e06dd58d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Usage:\n",
      "  python todo.py list\n",
      "  python todo.py add \"task description\"\n",
      "  python todo.py done N\n",
      "  python todo.py remove N\n",
      "  python todo.py help\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "# todo.py - very small CLI todo app\n",
    "\n",
    "import json\n",
    "import sys\n",
    "from pathlib import Path\n",
    "\n",
    "DATA = Path(\"todo.json\")\n",
    "\n",
    "def load():\n",
    "    if not DATA.exists():\n",
    "        return []\n",
    "    return json.loads(DATA.read_text())\n",
    "\n",
    "def save(items):\n",
    "    DATA.write_text(json.dumps(items, ensure_ascii=False, indent=2))\n",
    "\n",
    "def list_items(items):\n",
    "    if not items:\n",
    "        print(\"No todos.\")\n",
    "        return\n",
    "    for i, it in enumerate(items, 1):\n",
    "        status = \"âœ“\" if it.get(\"done\") else \" \"\n",
    "        print(f\"{i}. [{status}] {it['task']}\")\n",
    "\n",
    "def add_item(items, task):\n",
    "    items.append({\"task\": task, \"done\": False})\n",
    "    save(items)\n",
    "    print(\"Added.\")\n",
    "\n",
    "def done_item(items, index):\n",
    "    try:\n",
    "        items[index][\"done\"] = True\n",
    "        save(items)\n",
    "        print(\"Marked done.\")\n",
    "    except Exception:\n",
    "        print(\"Invalid index.\")\n",
    "\n",
    "def remove_item(items, index):\n",
    "    try:\n",
    "        items.pop(index)\n",
    "        save(items)\n",
    "        print(\"Removed.\")\n",
    "    except Exception:\n",
    "        print(\"Invalid index.\")\n",
    "\n",
    "def help_msg():\n",
    "    print(\"\"\"Usage:\n",
    "  python todo.py list\n",
    "  python todo.py add \"task description\"\n",
    "  python todo.py done N\n",
    "  python todo.py remove N\n",
    "  python todo.py help\n",
    "\"\"\")\n",
    "\n",
    "def main(argv):\n",
    "    items = load()\n",
    "    if len(argv) < 2:\n",
    "        help_msg(); return\n",
    "    cmd = argv[1]\n",
    "    if cmd == \"list\":\n",
    "        list_items(items)\n",
    "    elif cmd == \"add\":\n",
    "        if len(argv) < 3:\n",
    "            print(\"Provide task text.\"); return\n",
    "        add_item(items, \" \".join(argv[2:]))\n",
    "    elif cmd == \"done\":\n",
    "        if len(argv) < 3:\n",
    "            print(\"Provide index.\"); return\n",
    "        done_item(items, int(argv[2]) - 1)\n",
    "    elif cmd == \"remove\":\n",
    "        if len(argv) < 3:\n",
    "            print(\"Provide index.\"); return\n",
    "        remove_item(items, int(argv[2]) - 1)\n",
    "    else:\n",
    "        help_msg()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main(sys.argv)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "522982c4-44ae-4e52-8bc0-615e9a03dded",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
